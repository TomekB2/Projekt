{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\n//import { Subscription } from \"rxjs\";\n//import { RouterExtService } from \"./services/routerurlstate.service\";\nlet AppComponent = class AppComponent {\n  constructor(ccService, routerExtService) {\n    this.ccService = ccService;\n    this.routerExtService = routerExtService;\n    this.title = \"app\";\n    console.log(this.routerExtService.getCurrentUrl());\n    console.log(this.routerExtService.currentUrl);\n  }\n  handleClickSound() {\n    let x = document.getElementById(\"myAudio\");\n    x.play();\n  }\n  ngOnInit() {\n    // subscribe to cookieconsent observables to react to main events\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.initializeSubscription = this.ccService.initialized$.subscribe(event => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(event => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(event => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to cookieconsent observables to prevent memory leaks\n    this.popupOpenSubscription.unsubscribe();\n    this.popupCloseSubscription.unsubscribe();\n    this.initializeSubscription.unsubscribe();\n    this.statusChangeSubscription.unsubscribe();\n    this.revokeChoiceSubscription.unsubscribe();\n    this.noCookieLawSubscription.unsubscribe();\n  }\n};\nAppComponent = __decorate([Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\"\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAA2B,eAAe;AAO5D;AAEA;AAMO,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAWvBC,YACUC,SAAkC,EAClCC,gBAAkC;IADlC,cAAS,GAATD,SAAS;IACT,qBAAgB,GAAhBC,gBAAgB;IAZ1B,UAAK,GAAG,KAAK;IAcXC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,gBAAgB,CAACG,aAAa,EAAE,CAAC;IAClDF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,gBAAgB,CAACI,UAAU,CAAC;EAC/C;EAEAC,gBAAgB;IACd,IAAIC,CAAC,GAAqBC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;IAC5DF,CAAC,CAACG,IAAI,EAAE;EACV;EACAC,QAAQ;IACN;IACA,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACZ,SAAS,CAACa,UAAU,CAACC,SAAS,CAAC,MAAK;MACpE;IAAA,CACD,CAAC;IAEF,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACf,SAAS,CAACgB,WAAW,CAACF,SAAS,CAAC,MAAK;MACtE;IAAA,CACD,CAAC;IAEF,IAAI,CAACG,sBAAsB,GAAG,IAAI,CAACjB,SAAS,CAACkB,YAAY,CAACJ,SAAS,CAChEK,KAA2B,IAAI;MAC9B;IAAA,CACD,CACF;IAED,IAAI,CAACC,wBAAwB,GAAG,IAAI,CAACpB,SAAS,CAACqB,aAAa,CAACP,SAAS,CACnEK,KAA2B,IAAI;MAC9B;IAAA,CACD,CACF;IAED,IAAI,CAACG,wBAAwB,GAAG,IAAI,CAACtB,SAAS,CAACuB,aAAa,CAACT,SAAS,CACpE,MAAK;MACH;IAAA,CACD,CACF;IAED,IAAI,CAACU,uBAAuB,GAAG,IAAI,CAACxB,SAAS,CAACyB,YAAY,CAACX,SAAS,CACjEK,KAA0B,IAAI;MAC7B;IAAA,CACD,CACF;EACH;EAEAO,WAAW;IACT;IACA,IAAI,CAACd,qBAAqB,CAACe,WAAW,EAAE;IACxC,IAAI,CAACZ,sBAAsB,CAACY,WAAW,EAAE;IACzC,IAAI,CAACV,sBAAsB,CAACU,WAAW,EAAE;IACzC,IAAI,CAACP,wBAAwB,CAACO,WAAW,EAAE;IAC3C,IAAI,CAACL,wBAAwB,CAACK,WAAW,EAAE;IAC3C,IAAI,CAACH,uBAAuB,CAACG,WAAW,EAAE;EAC5C;CACD;AAnEY7B,YAAY,eAJxBD,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;CACd,CAAC,GACW/B,YAAY,CAmExB;SAnEYA,YAAY","names":["Component","AppComponent","constructor","ccService","routerExtService","console","log","getCurrentUrl","currentUrl","handleClickSound","x","document","getElementById","play","ngOnInit","popupOpenSubscription","popupOpen$","subscribe","popupCloseSubscription","popupClose$","initializeSubscription","initialized$","event","statusChangeSubscription","statusChange$","revokeChoiceSubscription","revokeChoice$","noCookieLawSubscription","noCookieLaw$","ngOnDestroy","unsubscribe","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\tomas\\OneDrive\\Pulpit\\sparwd\\Projekt\\Projekt\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\n\r\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport {\r\n  NgcCookieConsentService,\r\n  NgcNoCookieLawEvent,\r\n  NgcInitializingEvent,\r\n  NgcStatusChangeEvent,\r\n} from \"ngx-cookieconsent\";\r\n//import { Subscription } from \"rxjs\";\r\n\r\n//import { RouterExtService } from \"./services/routerurlstate.service\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  title = \"app\";\r\n\r\n  //keep refs to subscriptions to be able to unsubscribe later\r\n  private popupOpenSubscription: Subscription;\r\n  private popupCloseSubscription: Subscription;\r\n  private initializeSubscription: Subscription;\r\n  private statusChangeSubscription: Subscription;\r\n  private revokeChoiceSubscription: Subscription;\r\n  private noCookieLawSubscription: Subscription;\r\n\r\n  constructor(\r\n    private ccService: NgcCookieConsentService,\r\n    private routerExtService: RouterExtService\r\n  ) {\r\n    console.log(this.routerExtService.getCurrentUrl());\r\n    console.log(this.routerExtService.currentUrl);\r\n  }\r\n\r\n  handleClickSound() {\r\n    let x = <HTMLVideoElement>document.getElementById(\"myAudio\");\r\n    x.play();\r\n  }\r\n  ngOnInit() {\r\n    // subscribe to cookieconsent observables to react to main events\r\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(() => {\r\n      // you can use this.ccService.getConfig() to do stuff...\r\n    });\r\n\r\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(() => {\r\n      // you can use this.ccService.getConfig() to do stuff...\r\n    });\r\n\r\n    this.initializeSubscription = this.ccService.initialized$.subscribe(\r\n      (event: NgcInitializingEvent) => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      }\r\n    );\r\n\r\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(\r\n      (event: NgcStatusChangeEvent) => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      }\r\n    );\r\n\r\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(\r\n      () => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      }\r\n    );\r\n\r\n    this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(\r\n      (event: NgcNoCookieLawEvent) => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // unsubscribe to cookieconsent observables to prevent memory leaks\r\n    this.popupOpenSubscription.unsubscribe();\r\n    this.popupCloseSubscription.unsubscribe();\r\n    this.initializeSubscription.unsubscribe();\r\n    this.statusChangeSubscription.unsubscribe();\r\n    this.revokeChoiceSubscription.unsubscribe();\r\n    this.noCookieLawSubscription.unsubscribe();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}