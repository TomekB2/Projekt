{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookieconsent\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./nav-menu/nav-menu.component\";\nexport class AppComponent {\n  constructor(ccService) {\n    this.ccService = ccService;\n  }\n  ngOnInit() {\n    // subscribe to cookieconsent observables to react to main events\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.initializingSubscription = this.ccService.initializing$.subscribe(event => {\n      // the cookieconsent is initilializing... Not yet safe to call methods like `NgcCookieConsentService.hasAnswered()`\n      console.log(`initializing: ${JSON.stringify(event)}`);\n    });\n    this.initializedSubscription = this.ccService.initialized$.subscribe(() => {\n      // the cookieconsent has been successfully initialized.\n      // It's now safe to use methods on NgcCookieConsentService that require it, like `hasAnswered()` for eg...\n      console.log(`initialized: ${JSON.stringify(event)}`);\n    });\n    this.initializationErrorSubscription = this.ccService.initializationError$.subscribe(event => {\n      // the cookieconsent has failed to initialize... \n      console.log(`initializationError: ${JSON.stringify(event.error?.message)}`);\n    });\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(event => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(() => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n    this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(event => {\n      // you can use this.ccService.getConfig() to do stuff...\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to cookieconsent observables to prevent memory leaks\n    this.popupOpenSubscription.unsubscribe();\n    this.popupCloseSubscription.unsubscribe();\n    this.initializingSubscription.unsubscribe();\n    this.initializedSubscription.unsubscribe();\n    this.initializationErrorSubscription.unsubscribe();\n    this.statusChangeSubscription.unsubscribe();\n    this.revokeChoiceSubscription.unsubscribe();\n    this.noCookieLawSubscription.unsubscribe();\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.NgcCookieConsentService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"container\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"body\");\n      i0.ɵɵelement(1, \"app-nav-menu\");\n      i0.ɵɵelementStart(2, \"main\", 0);\n      i0.ɵɵelement(3, \"router-outlet\");\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i2.RouterOutlet, i3.NavMenuComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;AAkBA,OAAM,MAAOA,YAAY;EAYvBC,YAAoBC,SAAkC;IAAlC,cAAS,GAATA,SAAS;EAA6B;EAE1DC,QAAQ;IACN;IACA,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACF,SAAS,CAACG,UAAU,CAACC,SAAS,CAC9D,MAAK;MACH;IAAA,CACD,CAAC;IAEJ,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACL,SAAS,CAACM,WAAW,CAACF,SAAS,CAChE,MAAK;MACH;IAAA,CACD,CAAC;IAEJ,IAAI,CAACG,wBAAwB,GAAG,IAAI,CAACP,SAAS,CAACQ,aAAa,CAACJ,SAAS,CACnEK,KAA2B,IAAI;MAC9B;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiBC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,EAAE,CAAC;IACvD,CAAC,CAAC;IAEJ,IAAI,CAACK,uBAAuB,GAAG,IAAI,CAACd,SAAS,CAACe,YAAY,CAACX,SAAS,CAClE,MAAK;MACH;MACA;MACAM,OAAO,CAACC,GAAG,CAAC,gBAAgBC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,EAAE,CAAC;IACtD,CAAC,CAAC;IAEJ,IAAI,CAACO,+BAA+B,GAAG,IAAI,CAAChB,SAAS,CAACiB,oBAAoB,CAACb,SAAS,CACjFK,KAAkC,IAAI;MACrC;MACAC,OAAO,CAACC,GAAG,CAAC,wBAAwBC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAACS,KAAK,EAAEC,OAAO,CAAC,EAAE,CAAC;IAC7E,CAAC,CAAC;IAEJ,IAAI,CAACC,wBAAwB,GAAG,IAAI,CAACpB,SAAS,CAACqB,aAAa,CAACjB,SAAS,CACnEK,KAA2B,IAAI;MAC9B;IAAA,CACD,CAAC;IAEJ,IAAI,CAACa,wBAAwB,GAAG,IAAI,CAACtB,SAAS,CAACuB,aAAa,CAACnB,SAAS,CACpE,MAAK;MACH;IAAA,CACD,CAAC;IAEJ,IAAI,CAACoB,uBAAuB,GAAG,IAAI,CAACxB,SAAS,CAACyB,YAAY,CAACrB,SAAS,CACjEK,KAA0B,IAAI;MAC7B;IAAA,CACD,CAAC;EACN;EAEAiB,WAAW;IACT;IACA,IAAI,CAACxB,qBAAqB,CAACyB,WAAW,EAAE;IACxC,IAAI,CAACtB,sBAAsB,CAACsB,WAAW,EAAE;IACzC,IAAI,CAACpB,wBAAwB,CAACoB,WAAW,EAAE;IAC3C,IAAI,CAACb,uBAAuB,CAACa,WAAW,EAAE;IAC1C,IAAI,CAACX,+BAA+B,CAACW,WAAW,EAAE;IAClD,IAAI,CAACP,wBAAwB,CAACO,WAAW,EAAE;IAC3C,IAAI,CAACL,wBAAwB,CAACK,WAAW,EAAE;IAC3C,IAAI,CAACH,uBAAuB,CAACG,WAAW,EAAE;EAC5C;;AAvEW7B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA8B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MClBzBC,4BAAM;MACJA,+BAA6B;MAC7BA,+BAAwB;MACtBA,gCAA+B;MACjCA,iBAAO","names":["AppComponent","constructor","ccService","ngOnInit","popupOpenSubscription","popupOpen$","subscribe","popupCloseSubscription","popupClose$","initializingSubscription","initializing$","event","console","log","JSON","stringify","initializedSubscription","initialized$","initializationErrorSubscription","initializationError$","error","message","statusChangeSubscription","statusChange$","revokeChoiceSubscription","revokeChoice$","noCookieLawSubscription","noCookieLaw$","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\tomas\\OneDrive\\Pulpit\\sparwd\\Projekt\\Projekt\\ClientApp\\src\\app\\app.component.ts","C:\\Users\\tomas\\OneDrive\\Pulpit\\sparwd\\Projekt\\Projekt\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Subscription } from \"rxjs\";\r\nimport { Router, RouterEvent, NavigationEnd } from '@angular/router';\r\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport {\r\n  NgcCookieConsentService,\r\n  NgcNoCookieLawEvent,\r\n  NgcInitializingEvent,\r\n  NgcStatusChangeEvent,\r\n  NgcInitializationErrorEvent,\r\n} from \"ngx-cookieconsent\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n\r\n  //keep refs to subscriptions to be able to unsubscribe later\r\n  private popupOpenSubscription!: Subscription;\r\n  private popupCloseSubscription!: Subscription;\r\n  private initializingSubscription!: Subscription;\r\n  private initializedSubscription!: Subscription;\r\n  private initializationErrorSubscription!: Subscription;\r\n  private statusChangeSubscription!: Subscription;\r\n  private revokeChoiceSubscription!: Subscription;\r\n  private noCookieLawSubscription!: Subscription;\r\n\r\n  constructor(private ccService: NgcCookieConsentService) { }\r\n\r\n  ngOnInit() {\r\n    // subscribe to cookieconsent observables to react to main events\r\n    this.popupOpenSubscription = this.ccService.popupOpen$.subscribe(\r\n      () => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      });\r\n\r\n    this.popupCloseSubscription = this.ccService.popupClose$.subscribe(\r\n      () => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      });\r\n\r\n    this.initializingSubscription = this.ccService.initializing$.subscribe(\r\n      (event: NgcInitializingEvent) => {\r\n        // the cookieconsent is initilializing... Not yet safe to call methods like `NgcCookieConsentService.hasAnswered()`\r\n        console.log(`initializing: ${JSON.stringify(event)}`);\r\n      });\r\n\r\n    this.initializedSubscription = this.ccService.initialized$.subscribe(\r\n      () => {\r\n        // the cookieconsent has been successfully initialized.\r\n        // It's now safe to use methods on NgcCookieConsentService that require it, like `hasAnswered()` for eg...\r\n        console.log(`initialized: ${JSON.stringify(event)}`);\r\n      });\r\n\r\n    this.initializationErrorSubscription = this.ccService.initializationError$.subscribe(\r\n      (event: NgcInitializationErrorEvent) => {\r\n        // the cookieconsent has failed to initialize... \r\n        console.log(`initializationError: ${JSON.stringify(event.error?.message)}`);\r\n      });\r\n\r\n    this.statusChangeSubscription = this.ccService.statusChange$.subscribe(\r\n      (event: NgcStatusChangeEvent) => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      });\r\n\r\n    this.revokeChoiceSubscription = this.ccService.revokeChoice$.subscribe(\r\n      () => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      });\r\n\r\n    this.noCookieLawSubscription = this.ccService.noCookieLaw$.subscribe(\r\n      (event: NgcNoCookieLawEvent) => {\r\n        // you can use this.ccService.getConfig() to do stuff...\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // unsubscribe to cookieconsent observables to prevent memory leaks\r\n    this.popupOpenSubscription.unsubscribe();\r\n    this.popupCloseSubscription.unsubscribe();\r\n    this.initializingSubscription.unsubscribe();\r\n    this.initializedSubscription.unsubscribe();\r\n    this.initializationErrorSubscription.unsubscribe();\r\n    this.statusChangeSubscription.unsubscribe();\r\n    this.revokeChoiceSubscription.unsubscribe();\r\n    this.noCookieLawSubscription.unsubscribe();\r\n  }\r\n}\r\n","<body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <main class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </main>\r\n</body>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}