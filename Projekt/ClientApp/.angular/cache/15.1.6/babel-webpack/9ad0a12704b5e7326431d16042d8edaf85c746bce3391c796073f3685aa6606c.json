{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';\nfunction FormlyFieldRadio_ng_template_0_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"input\", 3);\n    i0.ɵɵelementStart(2, \"label\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"form-check-inline\", ctx_r2.props.formCheck === \"inline\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"is-invalid\", ctx_r2.showError);\n    i0.ɵɵproperty(\"id\", ctx_r2.id + \"_\" + i_r4)(\"name\", ctx_r2.field.name || ctx_r2.id)(\"value\", option_r3.value)(\"formControl\", option_r3.disabled ? ctx_r2.disabledControl : ctx_r2.formControl)(\"formlyAttributes\", ctx_r2.field);\n    i0.ɵɵattribute(\"value\", option_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", ctx_r2.id + \"_\" + i_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.label, \" \");\n  }\n}\nfunction FormlyFieldRadio_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, FormlyFieldRadio_ng_template_0_div_0_Template, 4, 12, \"div\", 1);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"formlySelectOptions\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind2(2, 3, ctx_r1.props.options, ctx_r1.field)));\n  }\n}\nclass FormlyFieldRadio extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      props: {\n        formCheck: 'default'\n      }\n    };\n  }\n  get disabledControl() {\n    return new FormControl({\n      value: this.formControl.value,\n      disabled: true\n    });\n  }\n}\nFormlyFieldRadio.ɵfac = /* @__PURE__ */function () {\n  let ɵFormlyFieldRadio_BaseFactory;\n  return function FormlyFieldRadio_Factory(t) {\n    return (ɵFormlyFieldRadio_BaseFactory || (ɵFormlyFieldRadio_BaseFactory = i0.ɵɵgetInheritedFactory(FormlyFieldRadio)))(t || FormlyFieldRadio);\n  };\n}();\nFormlyFieldRadio.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FormlyFieldRadio,\n  selectors: [[\"formly-field-radio\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"fieldTypeTemplate\", \"\"], [\"class\", \"form-check\", 3, \"form-check-inline\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-check\"], [\"type\", \"radio\", 1, \"form-check-input\", 3, \"id\", \"name\", \"value\", \"formControl\", \"formlyAttributes\"], [1, \"form-check-label\", 3, \"for\"]],\n  template: function FormlyFieldRadio_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FormlyFieldRadio_ng_template_0_Template, 3, 6, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.RadioControlValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i3.ɵFormlyAttributes, i1.AsyncPipe, i4.FormlySelectOptionsPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyFieldRadio, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field-radio',\n      template: `\n    <ng-template #fieldTypeTemplate>\n      <div\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        class=\"form-check\"\n        [class.form-check-inline]=\"props.formCheck === 'inline'\"\n      >\n        <input\n          type=\"radio\"\n          [id]=\"id + '_' + i\"\n          class=\"form-check-input\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"option.disabled ? disabledControl : formControl\"\n          [formlyAttributes]=\"field\"\n        />\n        <label class=\"form-check-label\" [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </ng-template>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\nclass FormlyBootstrapRadioModule {}\nFormlyBootstrapRadioModule.ɵfac = function FormlyBootstrapRadioModule_Factory(t) {\n  return new (t || FormlyBootstrapRadioModule)();\n};\nFormlyBootstrapRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FormlyBootstrapRadioModule\n});\nFormlyBootstrapRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, FormlyBootstrapFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n    types: [{\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field']\n    }]\n  })]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormlyBootstrapRadioModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyFieldRadio],\n      imports: [CommonModule, ReactiveFormsModule, FormlyBootstrapFormFieldModule, FormlySelectModule, FormlyModule.forChild({\n        types: [{\n          name: 'radio',\n          component: FormlyFieldRadio,\n          wrappers: ['form-field']\n        }]\n      })]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyBootstrapRadioModule, FormlyFieldRadio };","map":{"version":3,"names":["i0","Component","ChangeDetectionStrategy","NgModule","i1","CommonModule","i3","FormlyModule","i2","FormControl","ReactiveFormsModule","i4","FormlySelectModule","FieldType","FormlyBootstrapFormFieldModule","FormlyFieldRadio","constructor","arguments","defaultOptions","props","formCheck","disabledControl","value","formControl","disabled","ɵfac","ɵcmp","NgForOf","RadioControlValueAccessor","DefaultValueAccessor","NgControlStatus","FormControlDirective","ɵFormlyAttributes","AsyncPipe","FormlySelectOptionsPipe","type","args","selector","template","changeDetection","OnPush","FormlyBootstrapRadioModule","ɵmod","ɵinj","forChild","types","name","component","wrappers","declarations","imports"],"sources":["C:/Users/tomas/OneDrive/Pulpit/sparwd/Projekt/Projekt/ClientApp/node_modules/@ngx-formly/bootstrap/fesm2020/ngx-formly-bootstrap-radio.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ngx-formly/core';\nimport { FormlyModule } from '@ngx-formly/core';\nimport * as i2 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i4 from '@ngx-formly/core/select';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FieldType, FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';\n\nclass FormlyFieldRadio extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            props: {\n                formCheck: 'default',\n            },\n        };\n    }\n    get disabledControl() {\n        return new FormControl({ value: this.formControl.value, disabled: true });\n    }\n}\nFormlyFieldRadio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldRadio, deps: null, target: i0.ɵɵFactoryTarget.Component });\nFormlyFieldRadio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: FormlyFieldRadio, selector: \"formly-field-radio\", usesInheritance: true, ngImport: i0, template: `\n    <ng-template #fieldTypeTemplate>\n      <div\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        class=\"form-check\"\n        [class.form-check-inline]=\"props.formCheck === 'inline'\"\n      >\n        <input\n          type=\"radio\"\n          [id]=\"id + '_' + i\"\n          class=\"form-check-input\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"option.disabled ? disabledControl : formControl\"\n          [formlyAttributes]=\"field\"\n        />\n        <label class=\"form-check-label\" [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </ng-template>\n  `, isInline: true, directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i3.ɵFormlyAttributes, selector: \"[formlyAttributes]\", inputs: [\"formlyAttributes\", \"id\"] }], pipes: { \"async\": i1.AsyncPipe, \"formlySelectOptions\": i4.FormlySelectOptionsPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyFieldRadio, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'formly-field-radio',\n                    template: `\n    <ng-template #fieldTypeTemplate>\n      <div\n        *ngFor=\"let option of props.options | formlySelectOptions : field | async; let i = index\"\n        class=\"form-check\"\n        [class.form-check-inline]=\"props.formCheck === 'inline'\"\n      >\n        <input\n          type=\"radio\"\n          [id]=\"id + '_' + i\"\n          class=\"form-check-input\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"option.disabled ? disabledControl : formControl\"\n          [formlyAttributes]=\"field\"\n        />\n        <label class=\"form-check-label\" [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </ng-template>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\nclass FormlyBootstrapRadioModule {\n}\nFormlyBootstrapRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyBootstrapRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormlyBootstrapRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyBootstrapRadioModule, declarations: [FormlyFieldRadio], imports: [CommonModule,\n        ReactiveFormsModule,\n        FormlyBootstrapFormFieldModule,\n        FormlySelectModule, i3.FormlyModule] });\nFormlyBootstrapRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyBootstrapRadioModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            FormlyBootstrapFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'radio',\n                        component: FormlyFieldRadio,\n                        wrappers: ['form-field'],\n                    },\n                ],\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: FormlyBootstrapRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormlyFieldRadio],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        FormlyBootstrapFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'radio',\n                                    component: FormlyFieldRadio,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FormlyBootstrapRadioModule, FormlyFieldRadio };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}